name: Deploy EKS

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string

      aws-region:
        required: false
        type: string
        default: us-east-1

      env-name:
        required: true
        type: string

      service-name:
        description: "Define the name of deployment on Kubernetes when is not equal to the project name"
        required: false
        type: string

      dockerfile:
        required: true
        type: string

      version:
        description: "Define the version to build the docker image, if not defined will be latest"
        required: false
        type: string

      needs-core:
        description: "Option to copy core folder into service folder, used for some python services"
        required: false
        type: boolean
        default: false

    secrets:
      AWS_ACCESS_KEY_ID:
        description: "Access key id with permissions for ecr and eks"
        required: true

      AWS_SECRET_ACCESS_KEY:
        description: "Secret key with admin permissions for ecr and eks"
        required: true

      KUBE_CONFIG:
        required: true

      # --- Secrets for Service ---

      POSTGRES_URI:
        required: false
      
      POSTGRES_ADMIN_URI:
        required: false

      DISCORD_WEBHOOK_TOKEN:
        required: false

      MONGO_URI:
        required: false

      RABBITMQ_URI:
        required: false

      SENTRY_DSN:
        required: false

      SERVICE_AWS_ACCESS_KEY_ID:
        description: "Access key id for the service"
        required: false

      SERVICE_AWS_SECRET_ACCESS_KEY:
        description: "Secret key for the service"
        required: false

      JWT_SECRET:
        description: "JWT secret global for the service"
        required: false

      JWT_SECRET_SERVICE:
        description: "JWT secret specific for the service"
        required: false

      NEXXERA_HASH:
        description: "Token for access the Nexxera api"
        required: false

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set IMAGE_URI
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE_NAME: ${{ inputs.service-name }}
          PROJECT: ${{ inputs.project }}
        run: |
          if [ -z "$SERVICE_NAME" ] # check if service name is empty
          then
            echo ::set-output name=IMAGE_URI::$ECR_REGISTRY/$PROJECT
          else
            echo ::set-output name=IMAGE_URI::$ECR_REGISTRY/$SERVICE_NAME
          fi
        id: image

      - name: Build and push image
        env:
          IMAGE_URI: ${{ steps.image.outputs.IMAGE_URI }}
          DOCKERFILE: ${{ inputs.dockerfile }}
          PROJECT: ${{ inputs.project }}
          VERSION: ${{ inputs.version }}
        run: |
          if [ -z "$VERSION" ] # check if version is empty
          then
              docker build -t $IMAGE_URI:latest --target production --file $DOCKERFILE $PROJECT
          else
              docker build -t $IMAGE_URI:$VERSION --target production --file $DOCKERFILE $PROJECT
          fi

          docker push --all-tags $IMAGE_URI